{
	"info": {
		"_postman_id": "a0f6443e-fe4e-4e1c-9c07-4fcd7c27ec52",
		"name": "REQRES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14095033"
	},
	"item": [
		{
			"name": "LIST OF USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// bodyData = JSON.parse(responseBody)\r",
							"\r",
							"// value = bodyData.bodyData\r",
							"\r",
							"// console.log(value)\r",
							"// pm.environment.set(\"username\", \"abc\");\r",
							"//     //pm.collectionVariables.get(\"variable_key\");\r",
							"    \r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code has a string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET A USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"janet\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the response time\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.above(200)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"//json schema validation\r",
							"//firstly go to this URL to conver the JSON.....https://codebeautify.org/json-to-json-schema-generator\r",
							"\r",
							"var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome8\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome8\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"data\": {\r",
							"                    \"$ref\": \"#/definitions/Data\"\r",
							"                },\r",
							"                \"support\": {\r",
							"                    \"$ref\": \"#/definitions/Support\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"data\",\r",
							"                \"support\"\r",
							"            ],\r",
							"            \"title\": \"Welcome8\"\r",
							"        },\r",
							"        \"Data\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"email\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"first_name\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"last_name\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"avatar\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"uri\",\r",
							"                    \"qt-uri-protocols\": [\r",
							"                        \"https\"\r",
							"                    ],\r",
							"                    \"qt-uri-extensions\": [\r",
							"                        \".jpg\"\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"avatar\",\r",
							"                \"email\",\r",
							"                \"first_name\",\r",
							"                \"id\",\r",
							"                \"last_name\"\r",
							"            ],\r",
							"            \"title\": \"Data\"\r",
							"        },\r",
							"        \"Support\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"url\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"uri\",\r",
							"                    \"qt-uri-protocols\": [\r",
							"                        \"https\"\r",
							"                    ]\r",
							"                },\r",
							"                \"text\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"text\",\r",
							"                \"url\"\r",
							"            ],\r",
							"            \"title\": \"Support\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"Test that the schema is correct\", function(){\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//pm.test(\"Is success false?\", () => {\r",
							"//pm.expect(response.success).to.eql(false);\r",
							"//})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE A NEW USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//variable declaration\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test data type of the Response\", () => {\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.job).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code has a string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"leader\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"morpheus\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a JSON body\",()=> {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a data property\", () => {\r",
							"    const {} = pm.response.json();\r",
							"    pm.expect({}).to.be.a('object');\r",
							"});\r",
							"pm.test(\"Validate that right fields are included\", () => {\r",
							"pm.expect(jsonData).to.have.property('name');\r",
							"pm.expect(jsonData).to.have.property('job');\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Are Correct Details Returned?\", () => {\r",
							"pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"pm.expect(jsonData.job).to.eql(\"leader\");\r",
							"pm.expect(jsonData.id).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is more than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"This is pre-request script\");",
					"console.log(\"the request about to be run is\", pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}